[{"/Users/ashok/go/work/game/tik-tak/client/src/index.js":"1","/Users/ashok/go/work/game/tik-tak/client/src/App.js":"2","/Users/ashok/go/work/game/tik-tak/client/src/routes/Routes.js":"3","/Users/ashok/go/work/game/tik-tak/client/src/context/boardState.js":"4","/Users/ashok/go/work/game/tik-tak/client/src/components/index.js":"5","/Users/ashok/go/work/game/tik-tak/client/src/components/JoinRoom.js":"6","/Users/ashok/go/work/game/tik-tak/client/src/components/HomeNavbar.js":"7","/Users/ashok/go/work/game/tik-tak/client/src/components/Home.js":"8","/Users/ashok/go/work/game/tik-tak/client/src/components/Room.js":"9","/Users/ashok/go/work/game/tik-tak/client/src/components/Board.js":"10","/Users/ashok/go/work/game/tik-tak/client/src/serviceWorker.js":"11","/Users/ashok/go/work/game/tik-tak/client/src/components/BoardRoom.js":"12"},{"size":601,"mtime":1606880126626,"results":"13","hashOfConfig":"14"},{"size":464,"mtime":1606800995325,"results":"15","hashOfConfig":"14"},{"size":559,"mtime":1606902777937,"results":"16","hashOfConfig":"14"},{"size":420,"mtime":1606880263436,"results":"17","hashOfConfig":"14"},{"size":269,"mtime":1606903007893,"results":"18","hashOfConfig":"14"},{"size":1373,"mtime":1606967402608,"results":"19","hashOfConfig":"14"},{"size":1732,"mtime":1606967373830,"results":"20","hashOfConfig":"14"},{"size":417,"mtime":1606798178201,"results":"21","hashOfConfig":"14"},{"size":3782,"mtime":1606902611929,"results":"22","hashOfConfig":"14"},{"size":7764,"mtime":1606889455914,"results":"23","hashOfConfig":"14"},{"size":5086,"mtime":1606875319146,"results":"24","hashOfConfig":"14"},{"size":14350,"mtime":1606980286137,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1m4etkj",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},"/Users/ashok/go/work/game/tik-tak/client/src/index.js",[],["56","57"],"/Users/ashok/go/work/game/tik-tak/client/src/App.js",[],"/Users/ashok/go/work/game/tik-tak/client/src/routes/Routes.js",[],"/Users/ashok/go/work/game/tik-tak/client/src/context/boardState.js",[],"/Users/ashok/go/work/game/tik-tak/client/src/components/index.js",[],"/Users/ashok/go/work/game/tik-tak/client/src/components/JoinRoom.js",["58"],"import React from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction JoinRoom() {\n    const [uid, setuid] = useState(\"\");\n    let history = useHistory();\n\n    const onSubmit = () => {\n        console.log(uid);\n        history.push(`/board-room/${uid}`);\n    }\n\n    return (\n        <>\n            <div className=\"body_center\">\n                <div style={{ fontSize: \"2rem\", color: \"#514F4F\", marginBottom: '10px' }}>\n                    Enter the UID to join\n                </div>\n                <TextField\n                    style={{ width: '400px' }}\n                    label=\"UID\"\n                    variant=\"filled\"\n                    margin=\"normal\"\n                    size=\"small\"\n                    value={uid}\n                    onChange={(event) => setuid(event.target.value)}\n                />\n                <Button\n                    style={{ marginTop: '10px', width: '100px' }}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                        onSubmit()\n                    }}\n                >\n                    Submit\n                </Button>\n            </div>\n        </>\n    );\n}\n\nexport default JoinRoom;","/Users/ashok/go/work/game/tik-tak/client/src/components/HomeNavbar.js",["59"],"// import styled from \"styled-components\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport { v1 as uuid } from \"uuid\";\n\nfunction HomeNavbar() {\n\n  let history = useHistory();\n\n  const create=()=> {\n    const id = uuid();\n    history.push(`/room/${id}`);\n  }\n\n  const createBoard=()=> {\n    const id = uuid();\n    history.push(`/board-room/${id}`);\n  }\n\n\n\n  return (\n    <div style={{ display: \"flex\", background: \"#20232a\", padding: \"15px\" }}>\n      <div style={{ margin: \"auto auto auto 10px\" }}>\n        <a href=\"/\" style={{ color: \"white\", textDecoration: \"none\" }}>\n          HOME\n        </a>\n      </div>\n      <div style={{ margin: \"auto 10px auto auto\" }}>\n      <Button\n          style={{marginLeft:'5px'}}\n          variant=\"contained\" \n          color=\"primary\"\n          onClick={() => {\n            history.push(\"/board\");\n          }}\n        >\n          Click to Play\n      </Button>\n      <Button\n          style={{marginLeft:'5px'}}\n          variant=\"contained\" \n          color=\"primary\"\n          onClick={() => {\n            history.push(\"/join-room\");\n          }}\n        >\n          Join Room\n      </Button>\n      <Button\n          style={{marginLeft:'5px'}}\n          variant=\"contained\" \n          color=\"primary\"\n          onClick={() => {\n            createBoard();\n          }}\n        >\n          Create Room\n      </Button>\n      {/* <Button\n          style={{marginLeft:'5px'}}\n          variant=\"contained\" \n          color=\"primary\"\n          onClick={() => {\n            createBoard();\n          }}\n        >\n          Create Board Room\n      </Button> */}\n      </div>\n    </div>\n  );\n}\n\nexport default HomeNavbar;\n","/Users/ashok/go/work/game/tik-tak/client/src/components/Home.js",[],"/Users/ashok/go/work/game/tik-tak/client/src/components/Room.js",["60","61","62","63","64","65"],"import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport streamSaver from \"streamsaver\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst Container = styled.div`\n    padding: 20px;\n    display: flex;\n    height: 100vh;\n    width: 90%;\n    margin: auto;\n    flex-wrap: wrap;\n`;\n\nconst worker = new Worker(\"../worker.js\");\n\nconst Room = (props) => {\n    const [connectionEstablished, setConnection] = useState(false);\n    const [file, setFile] = useState(\"\");\n    const [gotFile, setGotFile] = useState(false);\n\n    const chunksRef = useRef([]);\n    const socketRef = useRef();\n    const peersRef = useRef([]);\n    const peerRef = useRef();\n    const fileNameRef = useRef(\"\");\n\n    const roomID = props.match.params.roomID;\n\n    useEffect(() => {\n        socketRef.current = io.connect(\"/\");\n        socketRef.current.emit(\"join room\", roomID);\n        socketRef.current.on(\"all users\", users => {\n            peerRef.current = createPeer(users[0], socketRef.current.id);\n        });\n\n        socketRef.current.on(\"user joined\", payload => {\n            peerRef.current = addPeer(payload.signal, payload.callerID);\n        });\n\n        socketRef.current.on(\"receiving returned signal\", payload => {\n            peerRef.current.signal(payload.signal);\n            setConnection(true);\n        });\n\n        socketRef.current.on(\"room full\", () => {\n            alert(\"room is full\");\n        })\n\n    }, []);\n\n    function createPeer(userToSignal, callerID) {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal });\n        });\n\n        peer.on(\"data\", handleReceivingData);\n\n        return peer;\n    }\n\n    function addPeer(incomingSignal, callerID) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returning signal\", { signal, callerID });\n        });\n\n        peer.on(\"data\", handleReceivingData);\n        peer.signal(incomingSignal);\n        setConnection(true);\n        return peer;\n    }\n\n    function handleReceivingData(data) {\n        if (data.toString().includes(\"done\")) {\n            setGotFile(true);\n            alert(data);\n\n        } else {\n            worker.postMessage(data);\n        }\n    }\n\n    function sendFile() {\n        const peer = peerRef.current;\n        console.log(\"file\", file);\n        peer.write(JSON.stringify({ done: true, fileName: file }));\n    }\n\n    let body;\n    if (connectionEstablished) {\n        body = (\n            <div>\n                <TextField\n                    style={{ width: '400px' }}\n                    label=\"UID\"\n                    variant=\"filled\"\n                    margin=\"normal\"\n                    size=\"small\"\n                    value={file}\n                    onChange={(event) => setFile(event.target.value)}\n                />\n                <Button\n                    style={{ marginTop: '10px', width: '100px' }}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                        sendFile()\n                    }}\n                >\n                    Submit\n                </Button>\n            </div>\n        );\n    } else {\n        body = (\n            <h1>Once you have a peer connection, you will be able to share files</h1>\n        );\n    }\n\n\n  \n\n    return (\n        <Container>\n            {body}\n        </Container>\n    );\n};\n\nexport default Room;\n","/Users/ashok/go/work/game/tik-tak/client/src/components/Board.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79"],"// import styled from \"styled-components\";\nimport React from \"react\";\nimport { BoardUpdateContext } from \"../context/boardState\";\nimport { useContext, useState } from \"react\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nfunction Board() {\n    const { board, setBoard } = useContext(BoardUpdateContext);\n    const [nValue, setNValue] = useState(3);\n    const [kValue, setKValue] = useState(3);\n    const [nArraySize, setNArraySize] = useState(Array(8).fill().map((x, i) => i + 3));\n    const [kArraySize, setKArraySize] = useState(Array(8).fill().map((x, i) => i + 3));\n    const [zeroTurn, setZeroTurn] = useState(true);\n\n    let initialValue = Array(3).fill(\"\").map(row => new Array(3).fill(\"\"));\n\n    const onGameOver = () => {\n        setNValue(3);\n        setKValue(3);\n        setBoard(initialValue);\n        setZeroTurn(true);\n    }\n\n    const horizontalCheck = (currentBoard, rowIndex, colIndex) => {\n        let leftMatched = 0;\n        let rightMatched = 0;\n        let symbol = zeroTurn ? \"0\" : \"X\";\n        for (let i = colIndex; i < nValue - 1; i++) {\n            if (currentBoard[rowIndex][i + 1] == symbol) {\n                rightMatched = rightMatched + 1;\n                console.log(\"rightMatched\", rightMatched);\n            } else {\n                break;\n            }\n        }\n        for (let i = colIndex; i > 0; i--) {\n            if (currentBoard[rowIndex][i - 1] == symbol) {\n                leftMatched = leftMatched + 1;\n                console.log(\"leftMatched\", leftMatched);\n\n            } else {\n                break;\n            }\n        }\n        let totalMatched = leftMatched + rightMatched + 1;\n        console.log(\"total matched\", totalMatched);\n        if (totalMatched == kValue) {\n            alert(`won by ${symbol}`);\n            onGameOver(initialValue);\n        }\n\n    }\n\n    const verticalCheck = (currentBoard, rowIndex, colIndex) => {\n        let bottomMatched = 0;\n        let topMatched = 0;\n        let symbol = zeroTurn ? \"0\" : \"X\";\n        for (let i = rowIndex; i < nValue - 1; i++) {\n            if (currentBoard[i + 1][colIndex] == symbol) {\n                topMatched = topMatched + 1;\n                console.log(\"topMatched\", topMatched);\n            } else {\n                break;\n            }\n        }\n        for (let i = rowIndex; i > 0; i--) {\n            if (currentBoard[i - 1][colIndex] == symbol) {\n                bottomMatched = bottomMatched + 1;\n                console.log(\"bottomMatched\", bottomMatched);\n\n            } else {\n                break;\n            }\n        }\n        let totalMatched = bottomMatched + topMatched + 1;\n        console.log(\"total matched\", totalMatched);\n        if (totalMatched == kValue) {\n            alert(`won by ${symbol}`);\n            onGameOver(initialValue);\n        }\n\n    }\n\n    const leftDiagonalCheck = (currentBoard, rowIndex, colIndex) => {\n        let bottomMatched = 0;\n        let topMatched = 0;\n        let x = rowIndex;\n        let y = colIndex;\n        let symbol = zeroTurn ? \"0\" : \"X\";\n        while (x < nValue - 1 && y < nValue - 1) {\n            y++;\n            x++;\n            if (currentBoard[x][y] == symbol) {\n                topMatched = topMatched + 1;\n                console.log(\"topMatched\", topMatched);\n            } else {\n                break;\n            }\n\n        }\n        x = rowIndex;\n        y = colIndex;\n        while (x > 0 && y > 0) {\n            y--;\n            x--;\n            if (currentBoard[x][y] == symbol) {\n                bottomMatched = bottomMatched + 1;\n                console.log(\"bottomMatched\", bottomMatched);\n\n            } else {\n                break;\n            }\n        }\n        let totalMatched = bottomMatched + topMatched + 1;\n        console.log(\"total matched\", totalMatched);\n        if (totalMatched == kValue) {\n            alert(`won by ${symbol}`);\n            onGameOver(initialValue);\n        }\n\n\n    }\n\n    const rightDiagonalCheck = (currentBoard, rowIndex, colIndex) => {\n        let bottomMatched = 0;\n        let topMatched = 0;\n        let x = rowIndex;\n        let y = colIndex;\n        let symbol = zeroTurn ? \"0\" : \"X\";\n        while (x > 0 && y < nValue - 1) {\n            y++;\n            x--;\n            if (currentBoard[x][y] == symbol) {\n                topMatched = topMatched + 1;\n                console.log(\"topMatched\", topMatched);\n            } else {\n                break;\n            }\n\n        }\n        x = rowIndex;\n        y = colIndex;\n        while (y > 0 && x < nValue - 1) {\n            y--;\n            x++;\n            if (currentBoard[x][y] == symbol) {\n                bottomMatched = bottomMatched + 1;\n                console.log(\"bottomMatched\", bottomMatched);\n\n            } else {\n                break;\n            }\n        }\n        let totalMatched = bottomMatched + topMatched + 1;\n        console.log(\"total matched\", totalMatched);\n        if (totalMatched == kValue) {\n            alert(`won by ${symbol}`);\n            onGameOver(initialValue);\n        }\n\n    }\n\n\n    const handleNChange = (event) => {\n        let value = event.target.value;\n        setNValue(value);\n        setKValue(value);\n        setKArraySize(Array(value - 1).fill().map((x, i) => i + 2))\n        let newBoard = Array(value).fill(\"\").map(row => new Array(value).fill(\"\"))\n        setBoard(newBoard);\n    };\n\n    const onBoxClick = (rowIndex, colIndex) => {\n        let currentBoard = [...board];\n        if (currentBoard[rowIndex][colIndex] == '') {\n            setZeroTurn(!zeroTurn);\n            if (zeroTurn) {\n                currentBoard[rowIndex][colIndex] = \"0\";\n            } else {\n                currentBoard[rowIndex][colIndex] = \"X\";\n            }\n            setBoard(currentBoard);\n            horizontalCheck(currentBoard, rowIndex, colIndex);\n            verticalCheck(currentBoard, rowIndex, colIndex);\n            leftDiagonalCheck(currentBoard, rowIndex, colIndex);\n            rightDiagonalCheck(currentBoard, rowIndex, colIndex);\n        }\n    }\n\n\n    const handleKChange = (event) => {\n        setKValue(event.target.value);\n    };\n\n    return (\n        <>\n            <div style={{ display: 'flex' }}>\n                <div style={{ margin: '25px' }}>Enter the value of n</div>\n                <Select\n                    value={nValue}\n                    onChange={handleNChange}\n                >\n                    {nArraySize.map(item => {\n                        return <MenuItem value={item}>{item}</MenuItem>\n                    })}\n                </Select>\n                <div style={{ margin: '25px' }}>Enter the value of k</div>\n                <Select\n                    value={kValue}\n                    onChange={handleKChange}\n                >\n                    {kArraySize.map(item => {\n                        return <MenuItem value={item}>{item}</MenuItem>\n                    })}\n                </Select>\n                <div style={{ margin: '25px' }}>0 turn first always</div>\n            </div>\n\n            <div className=\"body_center\">\n                <div style={{ margin: '25px' }}>{zeroTurn ? '0 turn now' : 'X turn now'}</div>\n                {board.map((row, rowIndex) => {\n                    return <div style={{ display: 'flex' }}>\n                        {row.map((item, colIndex) => {\n                            return <div style={{ height: '50px', width: '50px', border: 'solid 1px grey', display: 'flex', justifyContent: 'center', alignItems: 'center', cursor: 'pointer' }} onClick={() => { onBoxClick(rowIndex, colIndex); console.log(rowIndex, colIndex) }}>{item}</div>\n                        })}\n                    </div>\n                })}\n            </div>\n        </>\n    );\n}\n\nexport default Board;\n","/Users/ashok/go/work/game/tik-tak/client/src/serviceWorker.js",[],"/Users/ashok/go/work/game/tik-tak/client/src/components/BoardRoom.js",["80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112"],"import React, { useEffect, useRef, useState, useContext } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport Button from '@material-ui/core/Button';\nimport { BoardUpdateContext } from \"../context/boardState\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst worker = new Worker(\"../worker.js\");\n\nconst BoardRoom = (props) => {\n    const [connectionEstablished, setConnection] = useState(false);\n    const [file, setFile] = useState(\"\");\n    const [gotFile, setGotFile] = useState(false);\n    const [gameStart, setGameStart] = useState(false);\n\n    const chunksRef = useRef([]);\n    const socketRef = useRef();\n    const peersRef = useRef([]);\n    const peerRef = useRef();\n    const fileNameRef = useRef(\"\");\n\n    const roomID = props.match.params.roomID;\n\n\n    const { board, setBoard } = useContext(BoardUpdateContext);\n    const [nValue, setNValue] = useState(3);\n    const [kValue, setKValue] = useState(3);\n    const [nArraySize, setNArraySize] = useState(Array(8).fill().map((x, i) => i + 3));\n    const [kArraySize, setKArraySize] = useState(Array(8).fill().map((x, i) => i + 3));\n    const [zeroTurn, setZeroTurn] = useState(true);\n\n\n    let initialValue = Array(3).fill(\"\").map(row => new Array(3).fill(\"\"));\n\n    const onGameOver = () => {\n        setNValue(3);\n        setKValue(3);\n        setBoard(initialValue);\n        setZeroTurn(true);\n    }\n\n\n    const horizontalCheck = (currentBoard, rowIndex, colIndex) => {\n        let leftMatched = 0;\n        let rightMatched = 0;\n        let symbol = zeroTurn ? \"0\" : \"X\";\n        for (let i = colIndex; i < nValue - 1; i++) {\n            if (currentBoard[rowIndex][i + 1] == symbol) {\n                rightMatched = rightMatched + 1;\n            } else {\n                break;\n            }\n        }\n        for (let i = colIndex; i > 0; i--) {\n            if (currentBoard[rowIndex][i - 1] == symbol) {\n                leftMatched = leftMatched + 1;\n\n            } else {\n                break;\n            }\n        }\n        let totalMatched = leftMatched + rightMatched + 1;\n        if (totalMatched == kValue) {\n            alert(`won by ${symbol}`);\n            onGameOver(initialValue);\n        }\n\n    }\n\n    const verticalCheck = (currentBoard, rowIndex, colIndex) => {\n        let bottomMatched = 0;\n        let topMatched = 0;\n        let symbol = zeroTurn ? \"0\" : \"X\";\n        for (let i = rowIndex; i < nValue - 1; i++) {\n            if (currentBoard[i + 1][colIndex] == symbol) {\n                topMatched = topMatched + 1;\n            } else {\n                break;\n            }\n        }\n        for (let i = rowIndex; i > 0; i--) {\n            if (currentBoard[i - 1][colIndex] == symbol) {\n                bottomMatched = bottomMatched + 1;\n\n            } else {\n                break;\n            }\n        }\n        let totalMatched = bottomMatched + topMatched + 1;\n        if (totalMatched == kValue) {\n            alert(`won by ${symbol}`);\n            onGameOver(initialValue);\n        }\n\n    }\n\n    const leftDiagonalCheck = (currentBoard, rowIndex, colIndex) => {\n        let bottomMatched = 0;\n        let topMatched = 0;\n        let x = rowIndex;\n        let y = colIndex;\n        let symbol = zeroTurn ? \"0\" : \"X\";\n        while (x < nValue - 1 && y < nValue - 1) {\n            y++;\n            x++;\n            if (currentBoard[x][y] == symbol) {\n                topMatched = topMatched + 1;\n            } else {\n                break;\n            }\n\n        }\n        x = rowIndex;\n        y = colIndex;\n        while (x > 0 && y > 0) {\n            y--;\n            x--;\n            if (currentBoard[x][y] == symbol) {\n                bottomMatched = bottomMatched + 1;\n\n            } else {\n                break;\n            }\n        }\n        let totalMatched = bottomMatched + topMatched + 1;\n        if (totalMatched == kValue) {\n            alert(`won by ${symbol}`);\n            onGameOver(initialValue);\n        }\n\n\n    }\n\n    const rightDiagonalCheck = (currentBoard, rowIndex, colIndex) => {\n        let bottomMatched = 0;\n        let topMatched = 0;\n        let x = rowIndex;\n        let y = colIndex;\n        let symbol = zeroTurn ? \"0\" : \"X\";\n        while (x > 0 && y < nValue - 1) {\n            y++;\n            x--;\n            if (currentBoard[x][y] == symbol) {\n                topMatched = topMatched + 1;\n            } else {\n                break;\n            }\n\n        }\n        x = rowIndex;\n        y = colIndex;\n        while (y > 0 && x < nValue - 1) {\n            y--;\n            x++;\n            if (currentBoard[x][y] == symbol) {\n                bottomMatched = bottomMatched + 1;\n\n            } else {\n                break;\n            }\n        }\n        let totalMatched = bottomMatched + topMatched + 1;\n        if (totalMatched == kValue) {\n            alert(`won by ${symbol}`);\n            onGameOver(initialValue);\n        }\n\n    }\n\n\n    function handleNChange(arg) {\n        let value = arg;\n        setNValue(value);\n        setKValue(value);\n        setKArraySize(Array(value - 1).fill().map((x, i) => i + 2))\n    };\n\n    function setRecBoard(newNValue, newKValue) {\n        handleNChange(newNValue);\n        handleKChange(newKValue);\n\n    }\n\n    function onBoxClick(rowIndex, colIndex) {\n        console.log(\"box clicked \", rowIndex, colIndex);\n        let currentBoard = [...board];\n        console.log(\"current board\", currentBoard);\n        if (currentBoard[rowIndex][colIndex] == '') {\n            setZeroTurn(!zeroTurn);\n            if (zeroTurn) {\n                currentBoard[rowIndex][colIndex] = \"0\";\n            } else {\n                currentBoard[rowIndex][colIndex] = \"X\";\n            }\n            setBoard(currentBoard);\n            horizontalCheck(currentBoard, rowIndex, colIndex);\n            verticalCheck(currentBoard, rowIndex, colIndex);\n            leftDiagonalCheck(currentBoard, rowIndex, colIndex);\n            rightDiagonalCheck(currentBoard, rowIndex, colIndex);\n        }\n    }\n\n\n    const handleKChange = (value) => {\n        setKValue(value);\n    };\n\n    useEffect(() => {\n        console.log(\"printing board\", board);\n    }, [board]);\n\n    useEffect(() => {\n        let newBoard = Array(nValue).fill(\"\").map(row => new Array(nValue).fill(\"\"))\n        setBoard(newBoard);\n    }, [nValue]);\n\n    useEffect(() => {\n        socketRef.current = io.connect(\"/\");\n        socketRef.current.emit(\"join room\", roomID);\n        socketRef.current.on(\"all users\", users => {\n            peerRef.current = createPeer(users[0], socketRef.current.id);\n        });\n\n        socketRef.current.on(\"user joined\", payload => {\n            peerRef.current = addPeer(payload.signal, payload.callerID);\n\n        });\n\n        socketRef.current.on(\"receiving returned signal\", payload => {\n            peerRef.current.signal(payload.signal);\n            setConnection(true);\n\n        });\n\n        socketRef.current.on(\"room full\", () => {\n            alert(\"room is full\");\n        })\n\n    }, []);\n\n    const [netwrokData, setNetwrokData] = useState(\"\");\n    const handleReceivingData = (data) => {\n        setNetwrokData(data);\n    }\n\n    useEffect(() => {\n        if (netwrokData.toString().includes(\"done\")) {\n            setGotFile(true);\n            let recData = JSON.parse(netwrokData);\n            const { type, id } = recData.dataObj;\n            console.log(\"rec data\", recData);\n            if (type == \"INITIAL\") {\n                const { newNValue, newKValue } = recData.dataObj;\n                setInitialNK({ newKValue: newKValue, newNValue: newNValue })\n                setRecBoard(newNValue, newKValue);\n            }\n            if (type == \"INITIAL_ACCEPT\") {\n                const { newNValue, newKValue } = recData.dataObj;\n                alert(\"accepted\");\n                setGameStart(true);\n            }\n            if (type == \"INITIAL_REJECT\") {\n                alert(\"rejected\");\n            }\n            if (type == \"UPDATE\") {\n                const { rowIndex, colIndex } = recData.dataObj;\n                console.log(\"type udate call rec boxClick\", rowIndex, colIndex);\n                onBoxClick(rowIndex, colIndex);\n            }\n            if (type == \"RESET\") {\n                resetGame();\n                alert(\"game reset\")\n            }\n        } else {\n            worker.postMessage(netwrokData);\n        }\n\n    }, [netwrokData]);\n\n    function createPeer(userToSignal, callerID) {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal });\n        });\n\n        peer.on(\"data\", handleReceivingData);\n        return peer;\n    }\n\n    function addPeer(incomingSignal, callerID) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returning signal\", { signal, callerID });\n        });\n\n        peer.on(\"data\", handleReceivingData);\n        peer.signal(incomingSignal);\n        setConnection(true);\n        return peer;\n    }\n\n    const [initialNK, setInitialNK] = useState({});\n\n\n\n    function sendFile(obj) {\n        const peer = peerRef.current;\n        peer.write(JSON.stringify({ done: true, dataObj: obj, initiator: peer.initiator }));\n    }\n\n    function handleNKSend() {\n        let obj = {\n            newNValue: nValue,\n            newKValue: kValue,\n            type: \"INITIAL\"\n        };\n        sendFile(obj);\n    }\n\n    function handleNKRec(arg) {\n        if (arg == \"YES\") {\n            let obj = {\n                newNValue: nValue,\n                newKValue: kValue,\n                type: \"INITIAL_ACCEPT\"\n            };\n            setGameStart(true);\n            sendFile(obj)\n        } else {\n            let obj = {\n                newNValue: nValue,\n                newKValue: kValue,\n                type: \"INITIAL_REJECT\"\n            };\n            sendFile(obj)\n        }\n    }\n\n\n    function handleBoxClick(rowIndex, colIndex) {\n        console.log(\"zero turn\", zeroTurn);\n        console.log(\"peerRef.current.initiator\", peerRef.current.initiator);\n        if ((zeroTurn && peerRef.current.initiator) || (!zeroTurn && !peerRef.current.initiator)) {\n            onBoxClick(rowIndex, colIndex);\n            let obj = {\n                rowIndex: rowIndex,\n                colIndex: colIndex,\n                type: \"UPDATE\"\n            };\n            sendFile(obj);\n        }\n    }\n\n    const resetGame = () => {\n        setGameStart(false);\n        setNValue(3);\n        setKValue(3);\n        setBoard(initialValue);\n        setZeroTurn(true);\n    }\n\n    const handleReset = () => {\n        resetGame();\n        let obj = {\n            type: \"RESET\"\n        };\n        sendFile(obj);\n    }\n\n    return (\n        <>\n            {peerRef.current && peerRef.current.initiator && !gameStart &&\n                <div style={{ display: 'flex' }}>\n                    <div style={{ margin: '25px' }}>Enter the value of n</div>\n                    <Select\n                        value={nValue}\n                        onChange={(e) => handleNChange(e.target.value)}\n                        disabled={!peerRef.current.initiator}\n                    >\n                        {nArraySize.map(item => {\n                            return <MenuItem value={item}>{item}</MenuItem>\n                        })}\n                    </Select>\n                    <div style={{ margin: '25px' }}>Enter the value of k</div>\n                    <Select\n                        value={kValue}\n                        onChange={(e) => handleKChange(e.target.value)}\n                        disabled={!peerRef.current.initiator}\n                    >\n                        {kArraySize.map(item => {\n                            return <MenuItem value={item}>{item}</MenuItem>\n                        })}\n                    </Select>\n                    <div style={{ margin: '25px' }}><Button onClick={() => handleNKSend()} variant=\"contained\" >Send N,K</Button></div>\n                </div>\n            }\n            {peerRef.current && !peerRef.current.initiator && !gameStart && <div style={{ display: 'flex' }}>\n                <div style={{ margin: '25px' }}>N = {initialNK.newNValue}, K = {initialNK.newKValue}</div>\n                <div style={{ margin: '25px' }}><Button onClick={() => handleNKRec(\"YES\")} variant=\"contained\" >Accept</Button></div>\n                <div style={{ margin: '25px' }}><Button onClick={() => handleNKRec(\"NO\")} variant=\"contained\" >Reject</Button></div>\n            </div>}\n            {gameStart &&\n                <div>\n                    <div style={{ float: 'right', margin: '10px' }}><Button onClick={() => handleReset()} variant=\"contained\" color=\"secondary\">RESET</Button></div>\n                    <div style={{ textAlign: 'center', margin: '10px 0px', color: 'green' }}>GAME STARTED</div>\n\n                </div>\n            }\n            <div className=\"body_center\" style={{ pointerEvents: connectionEstablished ? \"\" : \"none\" }}>\n                {connectionEstablished ?\n                    <div style={{ margin: '25px' }}>\n                        {gameStart ? <div>{zeroTurn ? '0 turn now' : 'X turn now'}{(peerRef.current.initiator && zeroTurn) || (!peerRef.current.initiator && !zeroTurn) ? '(your turn now)' : '(his turn)'}</div> : <div>{peerRef.current.initiator ? 'Waiting for acceptance':'Accept To Start Game'}</div>}\n                    </div> :\n                    <div style={{ margin: '25px', color: 'red' }}>Waiting for user to join...</div>}\n                {board.map((row, rowIndex) => {\n                            return <div style={{ display: 'flex' }}>\n                                {row.map((item, colIndex) => {\n                                    return <div style={{ height: '50px', width: '50px', border: 'solid 1px grey', display: 'flex', justifyContent: 'center', alignItems: 'center', cursor: 'pointer' }} onClick={() => { handleBoxClick(rowIndex, colIndex) }}>{item}</div>\n                                })}\n                            </div>\n                        })}\n                    </div>\n\n        </>\n    );\n};\n\nexport default BoardRoom;\n",{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":4,"column":10,"nodeType":"119","messageId":"120","endLine":4,"endColumn":20},{"ruleId":"117","severity":1,"message":"121","line":11,"column":9,"nodeType":"119","messageId":"120","endLine":11,"endColumn":15},{"ruleId":"117","severity":1,"message":"122","line":5,"column":8,"nodeType":"119","messageId":"120","endLine":5,"endColumn":19},{"ruleId":"117","severity":1,"message":"123","line":23,"column":12,"nodeType":"119","messageId":"120","endLine":23,"endColumn":19},{"ruleId":"117","severity":1,"message":"124","line":25,"column":11,"nodeType":"119","messageId":"120","endLine":25,"endColumn":20},{"ruleId":"117","severity":1,"message":"125","line":27,"column":11,"nodeType":"119","messageId":"120","endLine":27,"endColumn":19},{"ruleId":"117","severity":1,"message":"126","line":29,"column":11,"nodeType":"119","messageId":"120","endLine":29,"endColumn":22},{"ruleId":"127","severity":1,"message":"128","line":53,"column":8,"nodeType":"129","endLine":53,"endColumn":10,"suggestions":"130"},{"ruleId":"117","severity":1,"message":"131","line":12,"column":24,"nodeType":"119","messageId":"120","endLine":12,"endColumn":37},{"ruleId":"132","severity":1,"message":"133","line":30,"column":47,"nodeType":"134","messageId":"135","endLine":30,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":38,"column":47,"nodeType":"134","messageId":"135","endLine":38,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":48,"column":26,"nodeType":"134","messageId":"135","endLine":48,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":60,"column":47,"nodeType":"134","messageId":"135","endLine":60,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":68,"column":47,"nodeType":"134","messageId":"135","endLine":68,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":78,"column":26,"nodeType":"134","messageId":"135","endLine":78,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":94,"column":36,"nodeType":"134","messageId":"135","endLine":94,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":107,"column":36,"nodeType":"134","messageId":"135","endLine":107,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":117,"column":26,"nodeType":"134","messageId":"135","endLine":117,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":134,"column":36,"nodeType":"134","messageId":"135","endLine":134,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":147,"column":36,"nodeType":"134","messageId":"135","endLine":147,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":157,"column":26,"nodeType":"134","messageId":"135","endLine":157,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":176,"column":46,"nodeType":"134","messageId":"135","endLine":176,"endColumn":48},{"ruleId":"117","severity":1,"message":"136","line":4,"column":8,"nodeType":"119","messageId":"120","endLine":4,"endColumn":14},{"ruleId":"117","severity":1,"message":"137","line":14,"column":12,"nodeType":"119","messageId":"120","endLine":14,"endColumn":16},{"ruleId":"117","severity":1,"message":"138","line":14,"column":18,"nodeType":"119","messageId":"120","endLine":14,"endColumn":25},{"ruleId":"117","severity":1,"message":"123","line":15,"column":12,"nodeType":"119","messageId":"120","endLine":15,"endColumn":19},{"ruleId":"117","severity":1,"message":"124","line":18,"column":11,"nodeType":"119","messageId":"120","endLine":18,"endColumn":20},{"ruleId":"117","severity":1,"message":"125","line":20,"column":11,"nodeType":"119","messageId":"120","endLine":20,"endColumn":19},{"ruleId":"117","severity":1,"message":"126","line":22,"column":11,"nodeType":"119","messageId":"120","endLine":22,"endColumn":22},{"ruleId":"117","severity":1,"message":"131","line":30,"column":24,"nodeType":"119","messageId":"120","endLine":30,"endColumn":37},{"ruleId":"132","severity":1,"message":"133","line":50,"column":47,"nodeType":"134","messageId":"135","endLine":50,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":57,"column":47,"nodeType":"134","messageId":"135","endLine":57,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":65,"column":26,"nodeType":"134","messageId":"135","endLine":65,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":77,"column":47,"nodeType":"134","messageId":"135","endLine":77,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":84,"column":47,"nodeType":"134","messageId":"135","endLine":84,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":92,"column":26,"nodeType":"134","messageId":"135","endLine":92,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":108,"column":36,"nodeType":"134","messageId":"135","endLine":108,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":120,"column":36,"nodeType":"134","messageId":"135","endLine":120,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":128,"column":26,"nodeType":"134","messageId":"135","endLine":128,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":145,"column":36,"nodeType":"134","messageId":"135","endLine":145,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":157,"column":36,"nodeType":"134","messageId":"135","endLine":157,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":165,"column":26,"nodeType":"134","messageId":"135","endLine":165,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":190,"column":46,"nodeType":"134","messageId":"135","endLine":190,"endColumn":48},{"ruleId":"127","severity":1,"message":"139","line":217,"column":8,"nodeType":"129","endLine":217,"endColumn":16,"suggestions":"140"},{"ruleId":"127","severity":1,"message":"128","line":241,"column":8,"nodeType":"129","endLine":241,"endColumn":10,"suggestions":"141"},{"ruleId":"117","severity":1,"message":"142","line":252,"column":27,"nodeType":"119","messageId":"120","endLine":252,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":254,"column":22,"nodeType":"134","messageId":"135","endLine":254,"endColumn":24},{"ruleId":"132","severity":1,"message":"133","line":259,"column":22,"nodeType":"134","messageId":"135","endLine":259,"endColumn":24},{"ruleId":"117","severity":1,"message":"143","line":260,"column":25,"nodeType":"119","messageId":"120","endLine":260,"endColumn":34},{"ruleId":"117","severity":1,"message":"144","line":260,"column":36,"nodeType":"119","messageId":"120","endLine":260,"endColumn":45},{"ruleId":"132","severity":1,"message":"133","line":264,"column":22,"nodeType":"134","messageId":"135","endLine":264,"endColumn":24},{"ruleId":"132","severity":1,"message":"133","line":267,"column":22,"nodeType":"134","messageId":"135","endLine":267,"endColumn":24},{"ruleId":"132","severity":1,"message":"133","line":272,"column":22,"nodeType":"134","messageId":"135","endLine":272,"endColumn":24},{"ruleId":"127","severity":1,"message":"145","line":280,"column":8,"nodeType":"129","endLine":280,"endColumn":21,"suggestions":"146"},{"ruleId":"132","severity":1,"message":"133","line":331,"column":17,"nodeType":"134","messageId":"135","endLine":331,"endColumn":19},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'create' is assigned a value but never used.","'streamSaver' is defined but never used.","'gotFile' is assigned a value but never used.","'chunksRef' is assigned a value but never used.","'peersRef' is assigned a value but never used.","'fileNameRef' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addPeer', 'createPeer', and 'roomID'. Either include them or remove the dependency array.","ArrayExpression",["149"],"'setNArraySize' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'styled' is defined but never used.","'file' is assigned a value but never used.","'setFile' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setBoard'. Either include it or remove the dependency array.",["150"],["151"],"'id' is assigned a value but never used.","'newNValue' is assigned a value but never used.","'newKValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onBoxClick', 'resetGame', and 'setRecBoard'. Either include them or remove the dependency array.",["152"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"153","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [addPeer, createPeer, roomID]",{"range":"160","text":"161"},"Update the dependencies array to be: [nValue, setBoard]",{"range":"162","text":"163"},{"range":"164","text":"161"},"Update the dependencies array to be: [netwrokData, onBoxClick, resetGame, setRecBoard]",{"range":"165","text":"166"},[1574,1576],"[addPeer, createPeer, roomID]",[6384,6392],"[nValue, setBoard]",[7074,7076],[8441,8454],"[netwrokData, onBoxClick, resetGame, setRecBoard]"]